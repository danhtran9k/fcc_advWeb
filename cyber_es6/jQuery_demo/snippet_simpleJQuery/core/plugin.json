{
	"jq-boilerplate-min": {
		"prefix": "jq-boilerplate-min",
		"body": "\r\n;(function ( $, window, undefined ) {\r\n\r\n  var pluginName = '${1:defaultPluginName}',\r\n      document = window.document,\r\n      defaults = {\r\n        propertyName: \"value\"\r\n      };\r\n\r\n  function Plugin( element, options ) {\r\n    this.element = element;\r\n\r\n    this.options = $.extend( {}, defaults, options) ;\r\n\r\n    this._defaults = defaults;\r\n    this._name = pluginName;\r\n\r\n    this.init();\r\n  }\r\n\r\n  Plugin.prototype.init = function () {\r\n    $2\r\n  };\r\n\r\n  $.fn[pluginName] = function ( options ) {\r\n    return this.each(function () {\r\n      if (!$.data(this, 'plugin_' + pluginName)) {\r\n        $.data(this, 'plugin_' + pluginName, new Plugin( this, options ));\r\n      }\r\n    });\r\n  }\r\n\r\n}(jQuery, window));",
		"description": "jQuery Plugin Boilerplate Minified",
		"scope": "source.js"
	},
	"jq-boilerplate": {
		"prefix": "jq-boilerplate",
		"body": "\r\n/*\r\n *  Project: $1\r\n *  Description: $2\r\n *  Author: $3\r\n *  License: $4\r\n */\r\n\r\n// the semi-colon before function invocation is a safety net against concatenated \r\n// scripts and/or other plugins which may not be closed properly.\r\n;(function ( $, window, undefined ) {\r\n\r\n  // undefined is used here as the undefined global variable in ECMAScript 3 is\r\n  // mutable (ie. it can be changed by someone else). undefined isn't really being\r\n  // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\r\n  // can no longer be modified.\r\n\r\n  // window and document are passed through as local variables rather than globals\r\n  // as this (slightly) quickens the resolution process and can be more efficiently\r\n  // minified (especially when both are regularly referenced in your plugin).\r\n\r\n  // Create the defaults once\r\n  var pluginName = '${5:defaultPluginName}',\r\n      document = window.document,\r\n      defaults = {\r\n        propertyName: \"value\"\r\n      };\r\n\r\n  // The actual plugin constructor\r\n  function Plugin( element, options ) {\r\n    this.element = element;\r\n\r\n    // jQuery has an extend method which merges the contents of two or \r\n    // more objects, storing the result in the first object. The first object\r\n    // is generally empty as we don't want to alter the default options for\r\n    // future instances of the plugin\r\n    this.options = $.extend( {}, defaults, options) ;\r\n\r\n    this._defaults = defaults;\r\n    this._name = pluginName;\r\n\r\n    this.init();\r\n  }\r\n\r\n  Plugin.prototype.init = function () {\r\n    // Place initialization logic here\r\n    // You already have access to the DOM element and the options via the instance, \r\n    // e.g., this.element and this.options\r\n\r\n    $6\r\n\r\n  };\r\n\r\n  // A really lightweight plugin wrapper around the constructor, \r\n  // preventing against multiple instantiations\r\n  $.fn[pluginName] = function ( options ) {\r\n    return this.each(function () {\r\n      if (!$.data(this, 'plugin_' + pluginName)) {\r\n        $.data(this, 'plugin_' + pluginName, new Plugin( this, options ));\r\n      }\r\n    });\r\n  }\r\n\r\n}(jQuery, window));",
		"description": "jQuery Plugin Boilerplate",
		"scope": "source.js"
	}
}